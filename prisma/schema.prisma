generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id        Int       @id @default(autoincrement())
  phone     String?   @unique
  email     String?   @unique
  name      String
  avatar    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  tokens    Token[]
  answers   Answer[]
  clubs     Club[]
  Chat      Chat[]
  Message   Message[]
}

// 하나의 채팅방은 방을 만든 사용자가 있을것이다.
model Chat {
  id        Int       @id @default(autoincrement())
  title     String    @default("Anonymous")
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  Club      Club      @relation(fields: [clubId], references: [id], onDelete: Cascade)
  clubId    Int
  messages  Message[]
  createdAt DateTime  @default(now())

  @@index([userId])
  @@index([clubId])
}

// message에는 작성자의 정보와, chat즉 채팅방의 정보가 한번에 들어가야 한다
// 당연하지만 메시지 정보드 들어가야 한다.
model Message {
  id      Int    @id @default(autoincrement())
  chat    Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId  Int
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  message String @db.MediumText

  @@index([chatId])
  @@index([userId])
}

// user와 club은 many-to-many 관계이다.
// 그 이유는 한 사람이 여러개의 동아리를 한 동아리가 여러개의 사용자를 가질 수 있기 때문이다.
model Club {
  id   Int    @id @default(autoincrement())
  name String

  users   User[]
  posts   Post[]
  Finance Finance[]

  ClubExpenditureInfo ClubExpenditureInfo?
  Chat                Chat[]
}

// Club의 자산, 수입, 지출을 저장하자
// Club의 각 월별 지출
model ClubExpenditureInfo {
  id              Int               @id @default(autoincrement())
  club            Club              @relation(fields: [clubId], references: [id], onDelete: Cascade)
  clubId          Int               @unique
  asset           Int
  income          Int
  MonthlyClubInfo MonthlyClubInfo[]

  @@index([clubId])
}

// 그리고 CLubExpenditureInfo에 MonthlyInfo를 가져와보자
// 나중에는 년도에 따라서 또 구분해줘야 하긴함 -> 일단 2022년도 하나만 생각하자

// 또한 각 month마다 
model MonthlyClubInfo {
  id            Int                 @id @default(autoincrement())
  expenditure   ClubExpenditureInfo @relation(fields: [expenditureId], references: [id], onDelete: Cascade)
  expenditureId Int
  month         Int

  @@index([expenditureId])
}

// many-to-many를 위한 추가 테이블
// model ClubsOnUsers {
//   user   User @relation(fields: [userId], references: [id])
//   userId Int
//   club   Club @relation(fields: [clubId], references: [id])
//   clubId Int

//   @@id([userId, clubId])
// }

model Token {
  id        Int      @id @default(autoincrement())
  payload   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

// model Executive {
//   id     Int   @id @default(autoincrement())
//   User   User? @relation(fields: [userId], references: [id])
//   userId Int?
//   Club   Club? @relation(fields: [clubId], references: [id])
//   clubId Int?
// }

// User가 만드는게 아니라 동아리에서 만듬 그리고 질문을 저장해야 하고
// 답변 목록을 쿼링할 수 있어야 한다.
// 또한 Post에는 제목도 있어야 할듯?
// 뿐만 아니라 해결여부도 나타내주어야 한다.
model Post {
  id        Int      @id @default(autoincrement())
  title     String
  question  String   @db.LongText
  solve     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  club      Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  clubId    Int
  answers   Answer[]

  @@index([clubId])
}

// Post와 연결되어 있는 답변 테이블 그리고 답변을 쓴 사용자를
// 가려낼 수 있어야 한다.
model Answer {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  answer String @db.MediumText

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([postId])
}

// 기본적으로는 지출이라고 본다.
// 그리고 Finance안에 들어가는 정보의 크기를 줄이고 쿼리문을 용이하게 작성하기 위해
// 1:1로 Detail한 정보는 FinanceDetail테이블과 연결했다.
model Finance {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  out           Boolean        @default(true)
  club          Club           @relation(fields: [clubId], references: [id], onDelete: Cascade)
  clubId        Int
  money         Int
  FinanceDetail FinanceDetail?

  @@index([clubId])
}

// 또한 FinanceDetail과 해시태그는 M:N관계이다.
// Finance에 요일 정보가 있기 때문에 그건 필요없다 이걸 활용하면 되서.
model FinanceDetail {
  id        Int             @id @default(autoincrement())
  finance   Finance         @relation(fields: [financeId], references: [id])
  financeId Int             @unique
  title     String
  img       String?
  hashtags  DetailHashTag[]

  @@index([financeId])
}

// FinanceDetail id = 1 -> "식음료" "MT" "술"
// 그리고 태그의 색도 중복되지 않게 DB에 저장해야 한다.
model DetailHashTag {
  id            Int             @id @default(autoincrement())
  financedetail FinanceDetail[]
  content       String
  color         String
}
